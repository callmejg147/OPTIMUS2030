/*************************************************************

  This sketch shows how to read values from Virtual Pins

  App project setup:
    Slider widget (0...100) on Virtual Pin V1
 *************************************************************/

// Template ID, Device Name and Auth Token are provided by the Blynk.Cloud
// See the Device Info tab, or Template settings
#define BLYNK_TEMPLATE_ID "TMPLulesoilU"
#define BLYNK_DEVICE_NAME "Smart Water"
#define BLYNK_AUTH_TOKEN "kvhIb1NS58Wpn_vvDtUbw_91lGhsFEz4"


#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <OneWire.h>
#include <DallasTemperature.h>


//Definitions

#define tempWire 34                        // Temperature sensor
#define turbiSen 39                     // Turbidity sensor
#define relay 5                           // Relay pin
#define vRef 3.3                          // ESP32 reference voltage
#define adcRes 4096.0                     // ESP32 ADC resolution
#define FSENSOR  27     
  
OneWire oneWire(tempWire);
DallasTemperature tempSen(&oneWire);
BlynkTimer timer;



char auth[] = BLYNK_AUTH_TOKEN;

char ssid[] = "Wifihome 2";  // type your wifi name
char pass[] = "asianet@143";  // type your wifi password

long currentMillis = 0;
long previousMillis = 0;
boolean ledState = LOW;
float calibrationFactor = 4.5;
volatile byte pulseCount;
byte pulse1Sec = 0;
float flowRate;
unsigned int flowMilliLitres;
unsigned long totalMilliLitres;                      
float voltsTurbi;
float temperature = 25;
float  tds = 0;
int freq = 2000, channel = 0, resolution = 8;
int flow = 0;
float volt =0;
float ntu = 0;
int interval = 1000;




float round_to_dp( float in_value, int decimal_place ) {
  float multiplier = powf( 10.0f, decimal_place );
  in_value = roundf( in_value * multiplier ) / multiplier;
  return in_value;
}

BLYNK_WRITE(V4) {
  flow = param.asInt();
}

void IRAM_ATTR pulseCounter()
{
  pulseCount++;
}


void getTemp() {
  tempSen.requestTemperatures();
  temperature = tempSen.getTempCByIndex(0);
  Serial.print("Celsius temperature: ");
  Serial.print(temperature); 
  if (temperature > 40) {
    digitalWrite(relay, LOW);
    }
  else 
  {
    
    digitalWrite(relay, HIGH);
  }
  Blynk.virtualWrite(V0, temperature);
}

void getFlow(){
  currentMillis = millis();
  if (currentMillis - previousMillis > interval)
  {
    
    pulse1Sec = pulseCount;
    pulseCount = 0;
    flowRate = (( 1000/(millis()- previousMillis)* pulse1Sec /calibrationFactor));
    previousMillis = millis();
    flowMilliLitres = (flowRate / 60) * 1000;
    totalMilliLitres += flowMilliLitres;
    Serial.print("Flow rate: ");
    Serial.print(int(flowRate));  
    Serial.print("L/min");
    Serial.print("\t"); 
    Serial.print("Output Liquid Quantity: ");
    Serial.print(totalMilliLitres);
    Serial.print("mL / ");
    Serial.print(totalMilliLitres / 1000);
    Serial.println("L");
  
  
}
Blynk.virtualWrite(V4, flowRate);
}

void getTurbidity()
{
  if (volt < 1.6) {
    ntu = 3000;
    }
    else if (volt < 2.77) {
    ntu = -2572.2 * pow(volt, 2) + 8700.5 * volt - 4352.9;
    }
    else{
    ntu = 0;
    }

    Blynk.virtualWrite(V1, ntu);
}

void setup()
{
  //startTime = millis();
  Serial.begin(115200);                   // begin serial monitor, 9600 is recommended for ESP8266 shield setup
  Blynk.begin(auth, ssid, pass);  // start Blynk

  pinMode(relay, OUTPUT);
  digitalWrite(relay, HIGH);
  pinMode(FSENSOR, INPUT_PULLUP);

  pulseCount = 0;
  flowRate = 0.0;
  flowMilliLitres = 0;
  totalMilliLitres = 0;
  previousMillis = 0;

  attachInterrupt(digitalPinToInterrupt(FSENSOR), pulseCounter, FALLING);

   }
void loop()
  {
    Blynk.run();
    // You can inject your own code or combine it with other sketches.
    // Check other examples on how to communicate with Blynk. Remember
    // to avoid delay() function!
    timer.run();
  }
